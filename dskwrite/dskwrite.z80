
	.z80
	cseg

FCB	EQU	005Ch
FDOS	EQU	5
CR	EQU	0Dh
LF	EQU	0Ah
EOF	EQU	1Ah
DPB	EQU	0C000h
DSPEC	EQU	0C01Bh
FMTBUF	EQU	0C02Bh
TABLE	EQU	0B000h
BUFF	EQU	08000h

	DEFB	0EBh,04h	;DOS protection... JMPS LABE
	EX	DE,HL
	JP	BEGIN
	DEFB	0B4h,09h	;DOS protection... MOV AH,9
	DEFB	0BAh
	DEFW	BVMES		;DOS protection... MOV DX,OFFSET BVMES
	DEFB	0CDh,021h	;DOS protection... INT 21h.
	DEFB	0CDh,020h	;DOS protection... INT 20h.

	DEFB	cr,'DSKWRITE (c) John Elliott',cr,lf
	DEFB	'08/03/2002',cr,lf,eof
;
	DSEG
BVMES:	DEFB	'This program requires an Amstrad PCW or Spectrum +3.',cr,lf,'$'
	CSEG

BEGIN:	SUB	A
	JP	PE,BADVER
	LD	C,0Ch
	CALL	FDOS
	CP	30h
	JR	NC,MAIN
BADVER:	LD	DE,BVMES
	LD	C,9
	JP	FDOS
;
MAIN:	CALL	USERF
	DEFW	00E3h
	CP	1
	JR	Z,OKAY
	CP	3
	JP	NZ,BADVER
;
; Attempt to load header of DSK file
;
OKAY:	LD	A,(FCB+1)
	CP	' '
	JP	Z,HELP
	CP	'/'
	JP	Z,HELP
	CP	'?'
	JP	Z,HELP
	CP	'['
	JP	Z,HELP
	
	LD	A,(FCB+10h)
	CP	1
	JP	C,HELP
	CP	3
	JP	NC,HELP
	DEC	A
	LD	(DRV),A

	XOR	A
	LD	(COMP),A
	LD	DE,FCB
	LD	C,0Fh
	CALL	FDOS
	INC	A
	JP	Z,OPENERR
	LD	DE,DSKH
	LD	HL,256
	CALL	LOAD
;
; See if file is compressed.
;
	LD	A,(DSKH)
	CP	76h
	JR	NZ,CHKHU
	LD	A,(DSKH+1)
	CP	0FFh
	JR	NZ,CHKHU
;
; Header is compressed. Close and reopen the file, in compressed mode.
;
	LD	A,1
	LD	(COMP),A
	LD	HL,DCOMP1
	LD	(DCJ),HL
	LD	DE,FCB
	LD	C,10h
	CALL	FDOS
	LD	HL,0
	LD	(FCB+12),HL
	LD	(FCB+14),HL
	LD	(FCB+20h),HL
	LD	C,2Ch	;Go back to record-at-a-time I/O.
	LD	E,1
	CALL	FDOS
;
; Now load the header in compressed form.
;
	CALL	PRINT
	DEFB	'(DSK file is squeezed, unsqueezing)',cr,lf,0
	LD	DE,FCB
	LD	C,0Fh
	CALL	FDOS
	INC	A
	JP	Z,OPENERR
	LD	DE,DSKH
	LD	HL,256
	CALL	LOAD
CHKHU:	CALL	CHKH
DESTOK:	CALL	CONFIRM
	LD	BC,(DSKH+30h)	;C = cyls B=heads
LOOPC:	PUSH	BC
	LD	DE,TRKH
	LD	HL,(DSKH+32h)	;Length of track+header
	CALL	LOAD
	POP	BC
	PUSH	BC
	CALL	TRKW
	POP	BC
	DJNZ	LOOPC
	LD	A,(DSKH+31h)
	LD	B,A
	DEC	C
	JR	NZ,LOOPC
	LD	DE,FCB
	LD	C,10h
	CALL	FDOS
	LD	DE,AD$
ERRPR:	CALL	PRINTD
EREXT:	LD	C,6Ch
	LD	DE,0FF00h
	CALL	FDOS
	RST	0
	
HELP:	LD	DE,HELP$
PRINTD:	LD	C,9
	JP	FDOS
;
LOAD:	LD	A,(COMP)
	OR	A
	JP	NZ,CLOAD
	PUSH	HL	;Length
	LD	C,1Ah
	CALL	FDOS	;Set DMA to load addr
	POP	HL
	ADD	HL,HL	;H = number of 128-byte records
	LD	E,H
	LD	C,2Ch
	CALL	FDOS
	LD	DE,FCB
	LD	C,14h
	CALL	FDOS
	OR	A
	RET	Z
	LD	DE,SHORT$
	JP 	ERRPR
;
CONFIRM:
	LD	A,(DRV)
	ADD	A,'A'
	LD	(ADRV),A
	LD	DE,CONF
	CALL	PRINTD
CONF1:	LD	C,6
	LD	E,0FFh
	CALL	FDOS
	LD	DE,CRLF
	CP	'y'
	JP	Z,PRINTD
	CP	'Y'
	JP	Z,PRINTD
	CP	'n'
	JP	Z,ERRPR
	CP	'N'
	JP	Z,ERRPR
	JR	CONF1
;
;Load bytes from compressed file
;
	DSEG
CDMA:	DEFW	0
CLEN:	DEFW	0
DCJ:	DEFW	0
CSP:	DEFW	0
MSP:	DEFW	0
	CSEG

CLOAD:	LD	(CDMA),DE
	LD	(CLEN),HL
	LD	HL,(DCJ)
	JP	(HL)
;
;Initial decompression phase
;
DCOMP1:	LD	(MSP),SP
	LD	SP,BUFF	;Switch to decompression thread
	CALL	USQ
	CALL	PRINT
	DEFB	'(Unsqueezing complete.)                   ',cr,lf,0
	LD	SP,(MSP)
	LD	HL,BUFF		;BUFULL wasn't called for the last block. Fake it.
	LD	DE,(CDMA)
	LD	BC,100h
	LDIR
	RET
;
; Copy USQ buffer to where it's wanted
;
BUFULL:	CALL	SPIN
	LD	HL,BUFF
	LD	DE,(CDMA)
	LD	BC,100h
	LDIR
	LD	(CDMA),DE
	LD	HL,(CLEN)
	DEC	H
	LD	(CLEN),HL
	RET	NZ
;
; Current compressed block read in.
;
	LD	(CSP),SP
	LD	HL,DCOMP2
	LD	(DCJ),HL
	LD	SP,(MSP)
	RET
;
DCOMP2:	LD	(MSP),SP
	LD	SP,(CSP)
	RET
;
; Construct a disc spec block 
;
TRKW:	PUSH	BC
	LD	HL,DSPEC
	LD	DE,DSPEC+1
	LD	BC,16
	LD	(HL),B
	LDIR			;Zap the disc spec block
	LD	IX,DSPEC
	LD	A,(DSKH+31h)	;Heads
	CP	2
	JR	C,TRKW92
	SET	0,(IX+1)	;Double-sided
	LD	(IX+0),3
TRKW92:	LD	A,(DSKH+30h)	;Tracks
	CP	41
	JR	C,TRKW93
	SET	7,(IX+1)	;Double-track
	LD	(IX+0),3
TRKW93:	LD	A,(DSKH+30h)	;Cylinders
	LD	(IX+2),A
	LD	A,(TRKH+15h)		;Sectors / track
	LD	(IX+3),A
	LD	A,(TRKH+14h)		;PSH
	LD	(IX+4),A
	LD	(IX+5),1
	LD	(IX+6),4
	LD	(IX+7),1
	LD	(IX+8),02Ah
	LD	A,(TRKH+16h)
	LD	(IX+9),A
	LD	HL,DSPEC
	LD	IX,DPB
	CALL	USERF
	DEFW	00A1h
	JP	NC,DSKERR
	LD	(IX+1Ah),0FFh
;
; We have a DPB. Get a track number.
;
TRKW2:	POP	BC
	LD	HL,(DSKH+30h)
	AND	A
	SBC	HL,BC	;H = head L=cylinder
	LD	A,(DSKH+31h)
	CP	2
	JR	C,NODBL
	LD	A,L
	ADD	A,A	;Track = Cyl * 2 + Head
	ADD	A,H
	LD	L,A
NODBL:	CALL	DOFORM	;Format the track
;
; nb: This relies on D (track number) being returned from DOFORM.
;
	CALL	DOWRT	;Write it
	RET
;
;Generate format data
;
DOFORM:	PUSH	HL
	LD	A,(TRKH + 15h)	;Sectors
	LD	HL,TRKH+18h	;HL->source
	LD	DE,FMTBUF
ZCPLP:	LD	BC,4
	LDIR
	INC	HL
	INC	HL
	INC	HL
	INC	HL
	DEC	A
	JR	NZ,ZCPLP	;Created format spec at C02Bh
	POP	HL
	LD	D,L
	LD	A,(TRKH+17h)	;Filler byte
	LD	E,A
	LD	HL,FMTBUF
	LD	B,0		;Bank for format data
	LD	A,(DRV)
	LD	C,A		;C = unit
	PUSH	BC
	PUSH	DE
	CALL	STATF
	CALL	USERF
	DEFW	008Fh
	POP	DE
	POP	BC
	JP	NC,DSKERR 	
	RET

;
; Write the sectors
;
DOWRT:	LD	IY,TRKH+1Ah
	LD	A,(TRKH+15h)
	LD	B,A		;Number of sectors
	LD	HL,TRKBUF	;->first sector
WSLP:	LD	A,(IY+0)	;Sector number
	SUB	(IX+14h)	;First sector number
	LD	E,A
	PUSH	DE
	PUSH	BC
	PUSH	HL
	CALL	STATW
	LD	B,1		;Data bank
	CALL	USERF
	DEFW	0089h		;Write data
	JP	NC,DSKERR
	POP	HL
	LD	C,(IX+15h)	
	LD	B,(IX+16h)
	ADD	HL,BC		;HL->next sector
	LD	BC,8
	ADD	IY,BC		;IY->next sector number
	POP	BC
	POP	DE
	DJNZ	WSLP
	RET	
;
	DSEG
SPBUF:	DEFW	SPBASE
SPBASE:	DEFB	'/-\|',0
	CSEG
;
SPIN:	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	IX
	PUSH	IY
	LD	HL,(SPBUF)
	INC	HL
	LD	A,(HL)
	OR	A
	JR	NZ,SPIN1
	LD	HL,SPBASE
	LD	A,(HL)
SPIN1:	LD	(SPBUF),HL
	LD	E,A
	LD	C,2
	CALL	FDOS
	LD	E,8
	LD	C,2
	CALL	FDOS
POPA:	POP	IY
	POP	IX
	POP	HL
	POP	DE
	POP	BC
	POP	AF
	RET
;

CHKH:	LD	DE,DSKH
	LD	HL,MVCPC
	LD	B,8
CP$:	LD	A,(DE)
	CP	(HL)
	JR	NZ,CPSE
	INC	HL
	INC	DE
	DJNZ	CP$
	RET
;
CPSE:	LD	DE,NOTDSK
	JP	ERRPR
;
OPENERR:
	LD	DE,OPNE$
	JP	ERRPR
;
DSKERR:	LD	L,A
	LD	H,0
	ADD	HL,HL
	LD	DE,DETBL
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	PUSH	DE
	LD	DE,CRLF
	CALL	PRINTD
	POP	DE
	JP	ERRPR
;
USERF:	PUSH	HL
	PUSH	BC
	LD	HL,(1)
	LD	BC,57h
	ADD	HL,BC
	POP	BC
	EX	(SP),HL
	RET
;
STATF:	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	IX
	PUSH	IY
	LD	HL,ATRK
	LD	A,D
	CALL	DEC3
	LD	DE,FMTS
	CALL	PRINTD
	JP	POPA
;
STATW:	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	IX
	PUSH	IY
	LD	HL,BTRK
	LD	A,D
	CALL	DEC3
	LD	HL,BSEC
	LD	A,E
	CALL	DEC3
	LD	DE,WRTS
	CALL	PRINTD
	JP	POPA
;
	DSEG
FMTS:	DEFB	' Formatting track '
ATRK:	DEFB	'000           ',cr,'$'
WRTS:	DEFB	' Writing    track '
BTRK:	DEFB	'000 sector '
BSEC:	DEFB	'000',cr,'$'
	CSEG

DEC3:	LD	C,100
	CALL	DECD
	LD	C,10
	CALL	DECD
	ADD	A,'0'
	LD	(HL),A
	RET
;
DECD:	LD	B,'0'
DECD1:	CP	C
	JR	C,DECD2
	INC	B
	SUB	C
	JR	DECD1
;
DECD2:	LD	(HL),B
	INC	HL
	RET	
;
PRINT:	POP	HL
PRINT1:	LD	A,(HL)
	INC	HL
	OR	A
	JR	NZ,PRLP
	JP	(HL)
;
PRLP:	CALL	COUT
	JR	PRINT1

COUT:	PUSH	HL
	LD	E,A
	LD	C,2
	CALL	FDOS
	POP	HL
	RET
;
	.8080
dle	equ	090h
;
;this is start of baseline USQ code
;
usq:	xra	a		;force init char read
	sta	numlft
	sta	rcnt		;and zero repeats
	lhld	lastmem
	shld	sob
	shld	eob
	call	getw		;Read & skip magic number
usq1:	call	getw		;get cksum, and store
	shld	filecrc
usq2:	call	get1
	jnz	erext
	ora	a
	jnz	usq2
usq3a:	call	getw
	shld	numvals
	lxi	d,258
	call	cmpdehl
	jc	usq3b
	call	errext
	db	13,10,'File has illegal decode size. Aborting.',0
;
usq3b:	lxi	d,table
usq4:	shld	max
	mov	a,h
	ora	l
	jz	usq5
	push	d
	call	getw
	pop	d
	xchg
	mov	m,e
	inx	h
	mov	m,d
	inx	h
	push	h
	call	getw
	xchg
	pop	h
	mov	m,e
	inx	h
	mov	m,d
	inx	h
	xchg
	lhld	max
	dcx	h
	jmp	usq4
;
usq5:	lxi	h,0
usq6:	push	h
	call	getnxt
	pop	h
	jnz	usq8
	mov	e,a
	mvi	d,0
	dad	d
	push	h
	push	psw
	LHLD	nextadr		; PT TO LOAD ADDRESS
	LDA	topram		; CHECK AGAINST END PAGE OF TPA
	CMP	H		; IF AT SAME PAGE, YES
	jnz	nofull		;buffer is not full yet
	call	bufull		;buffer full, process buffer
	lxi	h,buff		;reset buffer pointer
nofull:	pop	psw
	mov	m,a
	inx	h
	shld	nextadr
	pop	h
	jmp	usq6
;
usq8:	xchg
	lhld	filecrc
	call	cmpdehl
usq9:	rz
	call	print
	db	13,10,'ERROR - Checksum error in file ',0
	jmp	erext
;
errext:	pop	h
	mov	a,m
	ora	a
	jz	erext
	inx	h
	push	h
	call	COUT
	jmp	errext
;
cmpdehl:
	mov	a,h
	cmp	d
	rnz
	mov	a,l
	cmp	e
	ret
;
get1:	lhld	eob
	xchg
	lhld	sob
	call	cmpdehl
	jz	get1r
	mov	a,m
	inx	h
	shld	sob
	cmp	a
	ret
;
get1r:	lhld	lastmem
	shld	sob
	shld	eob
get1r1:	push	h
	xchg
	mvi	c,26
	call	FDOS
	lxi	d,fcb
	mvi	c,20
	call	FDOS
	pop	h
	ora	a
	jnz	get1r2
	lxi	d,128
	dad	d
	xchg
	lhld	endmem
	call	cmpdehl
	xchg
	jnc	get1r1
get1r2:	shld	eob
	xchg
	lhld	sob
	call	cmpdehl
	jnz	get1
	mvi	a,255
	ora	a
	ret
;
getw:	call	get1
	jnz	badr
	push	psw
	call	get1
	jnz	badr
	mov	h,a
	pop	psw
	mov	l,a
	ret
;
badr:	call	print
	db	13,10,'Premature EOF on file... aborted.',0
	rst	0
;
getnxt:	lda	rcnt		;see if in the middle of
	ora	a		;repeat sequence...
	jz	getn7
	dcr	a
	sta	rcnt
	lda	last
	cmp	a
	ret
getn7:	call	getn4
	cpi	dle
	jnz	getn5
	call	getn4
	ora	a
	jnz	getn6
	mvi	a,dle		;dle is encoded as dle,0
	cmp	a
	ret
getn6:	dcr	a
	dcr	a
	sta	rcnt
	lda	last
	cmp	a
	ret
getn5:	sta	last
	cmp	a
	ret
;
getn4:	lxi	d,0		;pointer @ sot
	lda	char
	mov	c,a
getn1:	lda	numlft
	ora	a
	jnz	getn2
	push	d
	call	get1
	jnz	badr
	pop	d
	mov	c,a
	mvi	a,8
getn2:	dcr	a
	sta	numlft
	mov	a,c
	rrc
	mov	c,a
	lxi	h,table
	jnc	getn3
	inx	h
	inx	h		;add 2 to point to right node
getn3:	dad	d
	dad	d
	dad	d
	dad	d		;ok.. pointing close to right plc..
	mov	e,m
	inx	h
	mov	d,m
	mov	a,d
	ani	128
	jz	getn1
	mov	a,c
	sta	char
	mov	a,d
	cpi	254		;is special eof?
	mvi	a,eof
	jz	geteof		;yup
	mov	a,e
	cma
	cmp	a
	ret
;
geteof:	pop	h
	ora	a
	ret
;
;end of baseline USQ code
;
	dseg

lastmem:dw	80h
endmem:	dw	80h+127
sob:	dw	80h
eob:	dw	80h
;
nextadr:dw	buff
numlft:	ds	1
rcnt:	ds	1
filecrc:ds	2
last:	ds	1
char:	ds	1
numvals:ds	2
max:	ds	2

	.z80

TOPRAM:	DEFB	81h	;Top of decompress buffer (256 bytes)
COMP:	DEFB	0	;Reading compressed file?
DRV:	DEFB	0	;Target drive
DETBL:	DEFW	ERR0, ERR1, ERR2, ERR3, ERR4, ERR5, ERR6, ERR7, ERR8, ERR9
ERR0:	DEFB	'Error: Drive not ready.',cr,lf,'$'
ERR1:	DEFB	'Error: Disc is write-protected.',cr,lf,'$'
ERR2:	DEFB	'Error: Seek fail.',cr,lf,'$'
ERR3:	DEFB	'Error: CRC data error.',cr,lf,'$'
ERR4:	DEFB	'Error: No data.',cr,lf,'$'
ERR5:	DEFB	'Error: Missing address mark.',cr,lf,'$'
ERR6:	DEFB	'Error: Bad format.',cr,lf,'$'
ERR7:	DEFB	'Error: Unknown error.',cr,lf,'$'
ERR8:	DEFB	'Error: Disc changed.',cr,lf,'$'
ERR9:	DEFB	'Error: Unsuitable disc for drive.',cr,lf,'$'
MVCPC:	DEFB	'MV - CPC'
AD$:	DEFB	cr,lf,'All done!'
CRLF:	DEFB	cr,lf,'$'
NODPB:	DEFB	cr,lf,'Error: Could not determine format for track.',cr,lf,'$'
OPNE$:	DEFB	cr,lf,'Error: Cannot open DSK file.',cr,lf,'$'
SHORT$:	DEFB	cr,lf,'Error: Unexpected end of DSK file.',cr,lf,'$'
NOTDSK:	DEFB	cr,lf,'Error: DSK file is not in the standard MV - CPC format.',cr,lf,'$'
CONF:	DEFB	'Warning: All the data on the disc in drive '
ADRV:	DEFB	'X: will be destroyed. Continue (Y/N)? $'
HELP$:	DEFB	'To turn a .DSK into a working disc, inse'
	DEFB	'rt a blank floppy disc and type:',cr,lf,lf
	DEFB	'    DSKWRITE filename A:',cr,lf
	DEFB	'or  DSKWRITE filename B:',cr,lf,'$'
;
; Must be at the end...
;
DSKH	EQU	$
TRKH	EQU	$+256
TRKBUF	EQU	$+512
	CSEG

	END

; Construct a disc spec block 
;
TRKW:	PUSH	BC
	LD	HL,DSPEC
	LD	DE,DSP